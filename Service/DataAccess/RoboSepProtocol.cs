//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace Tesla.DataAccess {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class RoboSepProtocol {
        
        /// <remarks/>
        public header header;
        
        /// <remarks/>
        public constraints constraints;
        
        /// <remarks/>
        public commands commands;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("customNames")]
        public customNames[] customNames;
        
        /// <remarks/>
        public multipleSamples multipleSamples;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("resultVialChecks")]
        public resultVialChecks[] resultVialChecks;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RoboSepProtocolType type;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class header {
        
        /// <remarks/>
        public date date;
        
        /// <remarks/>
        public author author;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string label;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string version;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string protocolNum1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string protocolNum2;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ProtocolDescriptionManualFill;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProtocolDescriptionManualFillSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class date {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="date")]
        public System.DateTime created;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="date")]
        public System.DateTime modified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modifiedSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class resultVialChecks {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool sampleTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sampleTubeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool bufferBottle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bufferBottleSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool separationTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool separationTubeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool wasteTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wasteTubeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool magneticParticleVial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool magneticParticleVialSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool selectionCocktailVial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool selectionCocktailVialSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool antibodyCocktailVial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool antibodyCocktailVialSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool lysisBufferTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lysisBufferTubeSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class multipleSamples {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Q1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Q1Specified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Q2;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Q2Specified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Q3;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Q3Specified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Q4;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Q4Specified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class customNames {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sampleTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bufferBottle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string separationTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string wasteTube;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string magneticParticleVial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string selectionCocktailVial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string antibodyCocktailVial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string lysisBufferTube;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class processingTime {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string duration;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class flags {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool home;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class absoluteVolume {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string value_uL;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class relativeVolume {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Decimal proportion;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class vials {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string src;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string dest;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceCommandType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PumpLifeCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DemoCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HomeAllCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaitCommandType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PauseCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeparateCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IncubateCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeCommandType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResuspendVialCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TopUpVialCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MixCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransportCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMaintenanceCommandType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FlushCommand))]
    public class CommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string seq;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string label;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string extensionTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PumpLifeCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DemoCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HomeAllCommand))]
    public class ServiceCommandType : CommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class PumpLifeCommand : ServiceCommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string iterations;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class DemoCommand : ServiceCommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string iterations;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class HomeAllCommand : ServiceCommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PauseCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeparateCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IncubateCommand))]
    public class WaitCommandType : CommandType {
        
        /// <remarks/>
        public processingTime processingTime;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class PauseCommand : WaitCommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class SeparateCommand : WaitCommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class IncubateCommand : WaitCommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResuspendVialCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TopUpVialCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MixCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransportCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMaintenanceCommandType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FlushCommand))]
    public class VolumeCommandType : CommandType {
        
        /// <remarks/>
        public vials vials;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("absoluteVolume", typeof(absoluteVolume))]
        [System.Xml.Serialization.XmlElementAttribute("relativeVolume", typeof(relativeVolume))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int tipRack;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tipRackSpecified;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class ResuspendVialCommand : VolumeCommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool freeAirDispense;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class TopUpVialCommand : VolumeCommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool freeAirDispense;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class MixCommand : VolumeCommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string mixCycles;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string tipTubeBottomGap;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class TransportCommand : VolumeCommandType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool freeAirDispense;

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public bool useBufferTip;
	}
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeCommand))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FlushCommand))]
    public class VolumeMaintenanceCommandType : VolumeCommandType {
        
        /// <remarks/>
        public flags flags;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class PrimeCommand : VolumeMaintenanceCommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class FlushCommand : VolumeMaintenanceCommandType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class commands {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TransportCommand", typeof(TransportCommand))]
        [System.Xml.Serialization.XmlElementAttribute("ResuspendVialCommand", typeof(ResuspendVialCommand))]
        [System.Xml.Serialization.XmlElementAttribute("PumpLifeCommand", typeof(PumpLifeCommand))]
        [System.Xml.Serialization.XmlElementAttribute("MixCommand", typeof(MixCommand))]
        [System.Xml.Serialization.XmlElementAttribute("TopUpVialCommand", typeof(TopUpVialCommand))]
        [System.Xml.Serialization.XmlElementAttribute("SeparateCommand", typeof(SeparateCommand))]
        [System.Xml.Serialization.XmlElementAttribute("DemoCommand", typeof(DemoCommand))]
        [System.Xml.Serialization.XmlElementAttribute("PauseCommand", typeof(PauseCommand))]
        [System.Xml.Serialization.XmlElementAttribute("PrimeCommand", typeof(PrimeCommand))]
        [System.Xml.Serialization.XmlElementAttribute("IncubateCommand", typeof(IncubateCommand))]
        [System.Xml.Serialization.XmlElementAttribute("HomeAllCommand", typeof(HomeAllCommand))]
        [System.Xml.Serialization.XmlElementAttribute("FlushCommand", typeof(FlushCommand))]
        public CommandType[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string number;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class workingVolume {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string sampleThreshold_uL;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string lowVolume_uL;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string highVolume_uL;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class sampleVolume {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string min_uL;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string max_uL;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class quadrants {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string number;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class constraints {
        
        /// <remarks/>
        public quadrants quadrants;
        
        /// <remarks/>
        public sampleVolume sampleVolume;
        
        /// <remarks/>
        public workingVolume workingVolume;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="STI", IsNullable=false)]
    public class author {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="STI")]
    public enum RoboSepProtocolType {
        
        /// <remarks/>
        Positive,
        
        /// <remarks/>
        Negative,
        
        /// <remarks/>
        HumanPositive,
        
        /// <remarks/>
        MousePositive,
        
        /// <remarks/>
        HumanNegative,
        
        /// <remarks/>
        MouseNegative,
        
        /// <remarks/>
        WholeBloodPositive,
        
        /// <remarks/>
        WholeBloodNegative,
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Maintenance,
        
        /// <remarks/>
        Shutdown,
    }
}

<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAW4RSAF2FUwBfiFcAYYpXAGKLWQBlj1sAZo9dAGmVXwBrmWEAbZtjAG2bZQBxmVcAfqRVAHaj
        ZAByoGcAeaptAHutbwB8r3MAgLR0AFqBUQBjjVoAZ5JdAGiPTgB6qWcAeejaAHr66gBv9ewAo//pAJrY
        jABznl8AdKRpAH2xbwBehlUAaohBAG/VyABj4+wAXdPsAFvO6wBf1+sAYtrrAGPe6QCo+MoAgq9jAGeV
        XQBW1/IAo9h9AF2DUgBfeDMAVc3mAFnJ6wBm4ekAZOnpAIi3ZgB3p2wAU8z1AFfG6wBTwuoAQJvAAEy3
        5gBTf1wATr3wAFbC6wBJx/cAZH86AGGBRgBrlVoAa5JVAFBrNwA5bWwAUrzmAJvKcABVbC0AVL/qAFGp
        tgBmik0Aa5dhAG+dZQA2iq8AUsPuAEdzWQBiq5sARl4pADl6iwCX0n8AWn9NAEiw4ABfvbsAY5FdAJL/
        +wBJaEMAW+L7AGWRWwBeiVoAb45GAIzQegCP9tcAd51WAGKPXwCW2pkAfL+LAHiZTABxk00AaO74AH3+
        +ACr5aAAWXU4AD2j0QBHrNgATcXfAGr4/QBrml4AXYJWAFaXQgBakDcAXX1DAHK0VgBmp0kAg8ZyAJPM
        hQBmnlkAhLt4AHWtaQBqp1wApNWSAMvGygAjShYA4NrhANru0wAcOBUAjq+EAFqLTgD9+f0A/P/5ADxv
        LAC8zLkAgISAAHrHZgAzWCkA4vrbAMXxugD1/fQAipOHAE11QgD18PYARXM3AJqamADb1doAz+XHAOfi
        6ACju5wA6vHoALi2tADh4+AATYU+APzt/QBilFUAU35HAIOzaQCOwHEAeqZfAH+rZwCSxncAfaphAFXQ
        7QA5YlQAYeLSAF7c7QBDdm0AVnpOAFbD7QCS5rQAYo5XAE6y2QBRuOIAYYVOAEiozgBVlIMAZtjaAFC2
        3QBXhkoATZqeAFbG7QB95skAWHhCAFfC5wBLhXgAPVo5AGOSWQBRcEEAU3ZLAE9wSgB3u2YAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD///8Aqampqampqam0VQEDAgIUVampqam/WpHAERERERERERGpqampqal4IQUFc0RQUEVFRaW7Ur6+
        vr+PEREREREREampqampARUhSLqwO0aurq6zrbOwTrtSvr6/cRERERERqampvBQGMLVGuUlGrq6urrOt
        ra2trbClvam+VRERERGpqakUXAS6Pao+SUZGRq6us7Otra2trWu7qampmhEREampIVyvOrk+Pj5JRjtG
        MaQ5Vlats62trbClFFUUEhERqbQVarU4Pj4+SbYaq5+jDqOetySus7Otra1QuBRVERGpA3NWRj4+Pjhn
        dwQBAwQEBAIUQWSkrq6zszs6cHCKEakVRDs4Pj5JG6tLIQUEBQQEAwMCIrKks66urjtqIbQRqa+wqj4+
        SRtlXQUFBQQEBAQEBAQDryKkRkZGRrEDAxEESK4+OTkkowQVFQUFBQUFBQQFBAQEA0tJSUk5N68EEV1T
        qklJRqsCBRUFFQYVakhzBgUFFawVrK0+Pj5JBhURIWunp6ckZAUVBRUVAkhFU6hzBgYVBQSpqKo+Pj5X
        BhEhSyJeXl4FBQUVFS9OO6QmpD9TpVNOa2xGJqSkJqYVEQKdA51VIZ0FAhQGFJ6foJ+hnqIrop6jop6f
        K581nhYRj5CKhIWKhZGSk36OlJGVlpKLipcSmJmaf4qbaYiVnBECfX5/gIGCg4SFhn+EeIeEiImKi4x/
        h3d/ho0SjoSDEXBxYXI1c3RhdXUMdXRhdTVyYWp2d3h2eXoPd3d7fAoRamtsbGxsVlZtMSczO1ZWVlZt
        bkJMCExMCW8KCgoKChFVOkZGST1jZGVlZgdeZGc0aGkNCAhMTApaU1NTU1FNESFORkZJSTZLXQMVXBZe
        X2AdYWJMTExMCkUnJSUyGU0RAlpGRklJW0tcXFwWCAgIFkxMTAkJCU1ITygoKDQ1DxEUVVZJST4+V1gW
        FhYICAhMCQkJCQlNS04zKSkoWQofES8DUElJPjg4UTAICAgITAkJCgpND1JTKSgpKBtUHx8RFAJIO0k+
        ODg3SksICAhMCQkKCk1ITk8pKSk0Gg0fNhEUAgM8PT44ODImPzxAQUJCQ0BERUYzKSkzKRxHDzY2ERQC
        IQUwNzgyMiYmJTc5Ojo6OyUpKSkpMyQcNQ82EBARLwIhBAQwMTIyJiYmJSUnJycoKCkpMyk0HDU2EBAQ
        EREUAiEEBBUsLSYmJiUlJycnKCgpKSkpJBouHxAQEBERERQCIQQEFQYiIyQlJiUlJycoKCgpGxwqKx8Q
        ERERERIRFAIDBAUVBhYWFxgZGhsbGxoaGhwdHh8QEBERERIgIBEBAgMEBQYHCAkJCQoLDA0NDQ4PDxAQ
        ERIREhMSExMTEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>